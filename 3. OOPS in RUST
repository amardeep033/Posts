0. How Rust Outperforms Java in OOP & System Design ‚Äî A Parking Lot Case Study

0.1 We all know Java as the go-to language for object-oriented design. But what if there‚Äôs a better way ‚Äî one that‚Äôs safer, faster, and more composable by default?
In this post, I‚Äôll show how Rust not only supports OOP, but does it with better safety, zero-cost abstractions, and SOLID principles baked in.
Using a Parking Lot System example, let‚Äôs break down how Rust compares to Java ‚Äî from encapsulation to macros ‚Äî and why it might be time to rethink how we build backend systems.
------------------------------------------------------------------------------------------------------------------------------------

1. What is SOLID? And How Our Parking Lot Follows It

1.1 **SOLID** is a set of design principles that make code robust and easy to maintain:

* **S**ingle Responsibility ‚Äî each unit should do one job.
* **O**pen/Closed ‚Äî extend without changing existing code.
* **L**iskov Substitution ‚Äî subclasses should behave like their parent types.
* **I**nterface Segregation ‚Äî no bloated interfaces.
* **D**ependency Inversion ‚Äî depend on abstractions, not implementations.

1.2 In our Parking Lot:

| Component         | Responsibility                                | How SOLID Applies                                                                | Design Details                                                                                      |
| ----------------- | --------------------------------------------- | -------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |
| `ParkingLot`      | Central manager for spots, vehicles, payments | **SRP**: Controls coordination only  <br> **DIP**: Depends on abstractions       | `Singleton` class that uses all abstractions like `FeeStrategy`, `Vehicle`, `PaymentStrategy`, etc. |
| `ParkingSpot`     | Manages spot status                           | **SRP**: Manages occupancy <br> **LSP**: Subtypes like `CarSpot` behave same     | `Abstract Class ParkingSpot` ‚Üí `CarSpot`, `BikeSpot`                                                |
| `FeeStrategy`     | Calculates fee (hourly, membership)           | **OCP**: Add new fee types without change <br> **ISP**: Focused interface        | `Interface FeeStrategy` ‚Üí `Hourly`, `Membership`                                                    |
| `VehicleFactory`  | Creates car/bike objects                      | **SRP**: Creation only <br> **DIP**: Returns abstract `Vehicle`                  | `Factory Class` ‚Üí creates `Vehicle` objects like `Car`, `Bike`                                      |
| `Vehicle`         | Abstract base for car/bike                    | **LSP**: `Car` and `Bike` behave as `Vehicle`                                    | `Abstract Class Vehicle` ‚Üí `Car`, `Bike`                                                            |
| `PaymentStrategy` | Handles how payment is done (cash, card)      | **OCP**: Add strategies without changes <br> **ISP + DIP**: Payment logic clean  | `Strategy Interface` ‚Üí `Cash`, `CreditCard`                                                         |
| `ExitObserver`    | Observes exit, triggers payment, vacates spot | **SRP**: Listens only <br> **OCP**: Extendable for future actions (e.g., notify) | `Observer Pattern` ‚Üí on vehicle exit: trigger payment and vacate `ParkingSpot`                      |

‚úÖ In **Java**, you rely on discipline and conventions.
‚úÖ In **Rust**, the language enforces safety and separation at compile time.

------------------------------------------------------------------------------------------------------------------------------------
2. üîê Encapsulation, üß¨ Inheritance, üé≠ Polymorphism

2.1 Encapsulation

**Java:**

```java
class ParkingSpot {
    private boolean occupied;
    public boolean isOccupied() { return occupied; }
    public void occupy() { this.occupied = true; }
}
```

‚ùå Java allows accidental field exposure or unsafe access using reflection.

**Rust:**

```rust
pub struct ParkingSpot {
    occupied: bool,
}

impl ParkingSpot {
    pub fn occupy(&mut self) { self.occupied = true; }
    pub fn is_occupied(&self) -> bool { self.occupied }
}
```

‚úÖ Fields are private by default in Rust. No reflection. Borrowing prevents unsafe access.

2.2 Inheritance & Polymorphism

**Java:**

```java
abstract class ParkingSpot {}
class CarSpot extends ParkingSpot {}
```

‚ùå Java's inheritance can become brittle. Mistyped overrides cause silent bugs.

**Rust:**

```rust
trait ParkingSpot { fn id(&self) -> u32; }
struct CarSpot { id: u32 }
impl ParkingSpot for CarSpot {
    fn id(&self) -> u32 { self.id }
}
```

‚úÖ Rust uses composition + traits. No inheritance tree. Polymorphism is explicit and safe.

------------------------------------------------------------------------------------------------------------------------------------

3. üí° Traits vs Interfaces ‚Äî Struct vs Class

| Concept     | Java                    | Rust                |
| ----------- | ----------------------- | ------------------- |
| Interface   | `interface FeeStrategy` | `trait FeeStrategy` |
| Class       | `class Car`             | `struct Car + impl` |
| Inheritance | `extends`               | ‚ùå Not supported    |
| Composition | ‚úÖ                      | ‚úÖ                 |

### Fee Strategy Example

**Java:**

```java
interface FeeStrategy {
    int calculate(int hours);
}
class Hourly implements FeeStrategy {
    public int calculate(int hours) {
        return hours * 10;
    }
}
```

‚ùå Java allows incorrect overrides or default behavior to slip through.

**Rust:**

```rust
trait FeeStrategy {
    fn calculate(&self, hours: u32) -> u32;
}

struct Hourly;
impl FeeStrategy for Hourly {
    fn calculate(&self, hours: u32) -> u32 { hours * 10 }
}
```

‚úÖ Rust checks method signatures at compile time. No surprises.

------------------------------------------------------------------------------------------------------------------------------------

4. üß† Ownership, Borrowing, Lifetimes

Rust enforces memory safety without a garbage collector.

**Java:**

```java
Car car = new Car();
lot.assign(car); // Can be shared/mutated from anywhere
```

‚ùå Shared mutable state. Risk of data races and memory leaks.

**Rust:**

```rust
struct ParkingLot<'a> {
    current: Option<&'a Car>,
}

impl<'a> ParkingLot<'a> {
    fn assign(&mut self, car: Car) {
        // Ownership of `car` moves here
        // For simplicity, we convert to a reference with lifetime 'a
        self.current = Some(&car);
        // Note: This example would need careful handling in real code
    }

    fn view(&self, car: &Car) {
        println!("ID: {}", car.id);
    }
}

```

‚úÖ Rust enforces:

Single Ownership ‚Äî each value has exactly one owner at a time.

Borrowing ‚Äî references (& or &mut) allow safe, temporary access without taking ownership.

Lifetimes ‚Äî the compiler checks how long references are valid to prevent dangling pointers or use-after-free errors.

This ensures no accidental sharing or mutation and guarantees memory safety at compile time.
------------------------------------------------------------------------------------------------------------------------------------
### 5. üö´ How Java Can Go Wrong ‚Äî and Rust Prevents It

| Problem            | Java Example                                  | Rust Example                                | Rust Fix Description                       |
| ------------------ | ---------------------------------------------| -------------------------------------------| ------------------------------------------|
| Null Pointer       | ```java                                      | ```rust                                   | `Option<T>` forces explicit handling.     |
|                    | String name = null;                           | let name: Option<String> = None;           | Prevents null pointer exceptions.          |
|                    | System.out.println(name.length()); // NPE    | if let Some(n) = name { println!("{}", n.len()); } | Must check before access.                  |
|                    | ```                                          | ```                                        |                                            |
| Error Handling     | ```java                                      | ```rust                                   | `Result<T, E>` forces explicit error handling.|
|                    | try {                                         | fn divide(a: i32, b: i32) -> Result<i32, String> { | No silent ignoring of errors.           |
|                    |   int res = a / b;                            |     if b == 0 {                             |                                           |
|                    | } catch (ArithmeticException e) {            |         Err(String::from("divide by zero")) |                                           |
|                    |   System.out.println("Error");                |     } else {                               |                                           |
|                    | }                                             |         Ok(a / b)                          |                                           |
|                    | ```                                          | }                                           |                                           |
| Memory Leaks       | ```java                                      | ```rust                                   | Ownership system auto frees unused memory. |
|                    | // No explicit free; GC runs later            | {                                           | No manual memory management needed.       |
|                    | List<String> list = new ArrayList<>();        |     let v = vec![1,2,3];                    |                                           |
|                    | // If references leak, GC can't free           | } // v goes out of scope, memory freed      |                                           |
|                    | ```                                          | ```                                        |                                           |
| Thread Safety      | ```java                                      | ```rust                                   | Rust enforces `Send` and `Sync` traits for thread safety.|
|                    | Runnable r = () -> {                           | use std::thread;                            | Compile-time checks prevent data races.   |
|                    |   count++; // Unsafe shared mutable state     | let handle = thread::spawn(|| {             |                                           |
|                    | };                                            |     println!("Hello from thread");         |                                           |
|                    | ```                                          | });                                          |                                           |
| Runtime Cost       | Uses reflection, GC, runtime checks           | Zero-cost abstractions via traits and ownership | Rust compiles down to efficient machine code.|
| Inheritance Errors | Mistyped overrides compile silently           | Trait impls checked strictly by compiler   | Rust prevents silent bugs from bad overrides.|

‚úÖ Rust won‚Äôt let you compile unless everything is safe, complete, and predictable.

------------------------------------------------------------------------------------------------------------------------------------

6. üß∞ Bonus: Macros to Eliminate Repetition

**Rust Macro Example:**

```rust
macro_rules! fee_impl {
    ($name:ident, $rate:expr) => {
        struct $name;
        impl FeeStrategy for $name {
            fn calculate(&self, h: u32) -> u32 { h * $rate }
        }
    };
}

fee_impl!(Hourly, 10);
fee_impl!(Membership, 0);
```

‚úÖ Macros generate trait implementations cleanly.
‚ùå Java uses annotations/reflection ‚Äî runtime cost, and less flexibility.

------------------------------------------------------------------------------------------------------------------------------------

7. üí• Final Thoughts

Java gave us OOP, but Rust gives us **safe, composable, high-performance OOP**.

Rust combines:

* Traits instead of inheritance
* Ownership instead of garbage collection
* Compile-time safety instead of runtime surprises
* Macros instead of boilerplate

All while making your designs SOLID by default.

So next time you build even a simple parking lot‚Ä¶

> Choose Rust. Choose fearless design.

------------------------------------------------------------------------------------------------------------------------------------

\#RustLang #Java #OOP #SOLID #SystemDesign #ParkingLot #Ownership #Traits #Macros #LinkedInPost
